datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model
model User {
  id               String   @id @default(uuid())
  email            String   @unique
  password         String
  firstName        String
  lastName         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  organizedEvents  Event[]        @relation("OrganizedEvents")
  purchasedTickets Ticket[]       @relation("TicketPurchaser")
  assignedTickets  TicketAssignee[] @relation("TicketAssignee")
  messages         Message[]
}

// Event model
model Event {
  id          String       @id @default(uuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  eventType   EventType    @default(PHYSICAL)
  location    String?
  virtualLink String?
  capacity    Int
  category    String
  status      EventStatus  @default(DRAFT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  organizer      User             @relation("OrganizedEvents", fields: [organizerId], references: [id])
  organizerId    String
  tickets        Ticket[]
  ticketTypes    TicketType[]
  TicketAssignee TicketAssignee[]
  messages       Message[]        @relation("EventMessages")
}

// Ticket model
model TicketType {
  id            String   @id @default(uuid())
  name          String
  price         Float
  quantity      Int
  description   String?
  maxPerUser    Int      @default(10)
  saleStartDate DateTime
  saleEndDate   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  event         Event     @relation(fields: [eventId], references: [id])
  eventId       String
  tickets       Ticket[]
}

model Ticket {
  id               String       @id @default(uuid())
  purchaseDate     DateTime     @default(now())
  status           TicketStatus @default(VALID)
  paymentReference String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relations
  purchaser        User           @relation("TicketPurchaser", fields: [purchaserId], references: [id])
  purchaserId      String
  event            Event          @relation(fields: [eventId], references: [id])
  eventId          String
  ticketType       TicketType     @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId     String
  assignee         TicketAssignee?
}

// New model for ticket assignees
model TicketAssignee {
  id          String    @id @default(uuid())
  email       String?    // Optional if linked to a user      
  firstName   String?    // Optional if linked to a user
  lastName    String?    // Optional if linked to a user
  attendedAt  DateTime? 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  ticket      Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId    String    @unique
  user        User?     @relation("TicketAssignee", fields: [userId], references: [id])
  userId      String?
  eventId     String               
  event       Event     @relation(fields: [eventId], references: [id]) 
  
  @@unique([userId, eventId], name: "oneTicketPerUserPerEvent") // Add this constraint when userId is present
  @@unique([email, eventId], name: "oneTicketPerEmailPerEvent") // Add this for non-registered attendees
}

// Message model for event communications
model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sender    User    @relation(fields: [senderId], references: [id])
  senderId  String
  event     Event   @relation("EventMessages", fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
}

// Enums
enum EventType {
  PHYSICAL
  VIRTUAL
  HYBRID
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum TicketStatus {
  PENDING
  VALID
  USED
  CANCELLED
  EXPIRED
}